# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

resources:
  containers:
  - container: nodejs
    image: node:8.15-jessie
  - container: ubuntu
    image: lenisha/ubuntu16-docker:latest


trigger: 
  branches:
    include:
    - master
    - azure-pipelines
pr:
 autoCancel: true
 branches:
  include: 
   - azure-pipelines
   - master

jobs:
- job: RunNodeBuild
  container: nodejs
  pool:
    #vmImage: 'Ubuntu 16.04'
    name: 'ubuntu18'

  steps:
    - script: 
        npm install 
      displayName: 'Run npm install'     

    - script:
        npm test
      displayName: 'Run unit tests'
      continueOnError: true

    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: '$(System.DefaultWorkingDirectory)/test-report.xml'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish Code Coverage'
      condition: in(variables['Agent.JobStatus'], 'Succeeded')
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/*coverage.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)/coverage'
   
    - task: ArchiveFiles@2
      displayName: 'Archive sources'
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)'
        includeRootFolder: false
        archiveType: tar
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).tar.gz' 
        verbose: true

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: drop

- job: RunAssetPublish
  container: ubuntu
  dependsOn: RunNodeBuild
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  pool:
    name: 'ubuntu18'    #vmImage: 'Ubuntu 16.04'

  steps:
  - task: Docker@0
    displayName: 'Build an image'
    inputs:
      azureSubscription: 'azure'
      azureContainerRegistry: aksappsacr.azurecr.io
      imageName: 'aksappsacr.azurecr.io/contoso/contosoair:$(Build.BuildId)'
      includeLatestTag: true
  - bash: |
      set -ex
      sudo groupadd -g $(stat --format='%g' /var/run/docker.sock) docker
      sudo usermod -a -G docker $(whoami)
    displayName: Docker socket

